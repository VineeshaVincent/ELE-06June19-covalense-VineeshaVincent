{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Verdana;}{\f1\fnil Verdana;}{\f2\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs36\lang9  \par
CODE CONVENTIONS IN JAVA\par
\par

\pard\sa200\sl276\slmult1\fs28 INTRODUCTION\par
\fs24 Why We Have Code Conventions?\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\qj\b0\fs22 Code conventions improve the readability of the software, allowing engineers to understand new code more quickly and thoroughly.\par
{\pntext\f2\'B7\tab}It is important to get used to and follow coding conventions, so that code written by multiple programmers will appear the same.\par

\pard\sa200\sl276\slmult1\qj\b\fs24\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\qj\fs28 File Names\par

\pard\sa200\sl276\slmult1\qj\b0\fs22 These are the  lists commonly used file suffixes and names.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\qj\b File Sufixs\par

\pard\sa200\sl276\slmult1\qj File Type  \tab  \tab Suffix\par

\pard\sa200\sl276\slmult1\b0 Java source \tab\tab .java\par
Java bytecode\tab  .class\par
\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b File Names\par

\pard\sa200\sl276\slmult1 File Name  \tab\tab\tab Use\par
\b0 GNUmakefile\tab\tab  The preferred name for makefiles.\par
\tab\tab\tab  We use gnumake to build our software.\par
README T\tab\tab he preferred name for the file that summarizes the\par
\tab\tab\tab contents of a particular directory.\par
\b\fs24\par
\fs28 2.File Organization\par
\b0\fs22 A file consists of sections that should be separated by blank lines and an optional comment identifying each section.\par
Files longer than 2000 lines are cumbersome and should be avoided.\par
\par
\b\fs28 3.Java Source Files\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\fs22 Each Java source file contains a single public class or interface. \par
{\pntext\f2\'B7\tab}When private classes and interfaces are associated with a public class, you can put them in the same source file as the public class. \par
{\pntext\f2\'B7\tab}The public class should be the first class or interface in the file.\par

\pard\sa200\sl276\slmult1\b 3.1 Beginning Comments\par
\b0 All source files should begin with a c-style comment that lists the programmer(s), the date, a copyright notice, and also a brief description of the purpose of the program. \par
/*\par
* Classname\par
*\par
 * Version info\par
 *\par
 * Copyright notice\par
 */\par
\b 3.2 Package and Import Statements\par
\b0 The first non-comment line of most Java source files is a package statement. After that,import statements can follow. \par
Example:\tab package java.awt;\par
\tab\tab import java.awt.peer.CanvasPeer;\par
\b 3.3 Class and Interface Declarations\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  \b0 Class/interface documentation comment (/**...*/)\par
{\pntext\f2\'B7\tab}class or interface statement\par
{\pntext\f2\'B7\tab}Class/interface implementation comment (/*...*/), if necessary\par
{\pntext\f2\'B7\tab}Class (static) variables\par
{\pntext\f2\'B7\tab}Instance variables\par
{\pntext\f2\'B7\tab}Constructors\par
{\pntext\f2\'B7\tab} Methods\par

\pard\sa200\sl276\slmult1\par
\b\fs28 4.Indentation\par
\b0\fs22 Four spaces should be used as the unit of indentation. \par
\b 4.1 Line Lenght\par
\b0 Avoid lines longer than 80 characters, since they\rquote re not handled well by many terminals and tools.\par
\b 4.2  Wrapping Lines\par
\b0 When an expression will not fit on a single line, break it according to these general principles:\par
\f1\bullet  Break after a comma.\par
\bullet  Break before an operator.\par
\bullet  Prefer higher-level breaks to lower-level breaks.\par
\bullet  Align the new line with the beginning of the expression at the same level on the previous\f0\lang1033  \f1\lang9 line.\par
\bullet  If the above rules lead to confusing code or to code that\rquote s squished up against the right\f0\lang1033  \f1\lang9 margin, just indent 8 spaces instead.\par
\b\f0\lang1033\tab Example: \b0 longName1 = longName2 * (longName3 + longName4 longName5)+ 4 * longname6; // PREFER\par
longName1 = longName2 * (longName3 + longName4- longName5) + 4 * longname6; // AVOID\par
These are two examples of breaking an arithmetic expression. The first is preferred, since the break occurs outside the parenthesized expression, which is at a higher level.\par
\b\par
\fs28 5.Comments\par
\b0\fs22 Java programs can have two kinds of comments: implementation comments and documentation comments.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Implementation comments are those found in C++, which are delimited by /*...*/ and //\lang9\par
{\pntext\f2\'B7\tab} Documentation comments (known as \ldblquote doc comments\rdblquote ) are Java-only, and are delimited by /**...*/. \par

\pard\sa200\sl276\slmult1\b 5.1 Implementation Comment Formats\par

\pard\li720\sa200\sl276\slmult1 1.Block Comments\par
\b0 Block comments are used to provide descriptions of files, methods, data structures and algorithms.\par
\b Example:\b0 /*\par
 * Here is a block comment.\par
 */\par
\b 2.Single-Line Comments\par
 \b0 A single-line comment should be preceded by a blank line. \par
\b Example:\b0 if (condition) \{\par
 /* Handle the condition. */\par
 ...\par
\}\par
\b 3.Trailing Comments\par
\b0 Avoid the assembly language style of commenting every line of executable code with a trailing comment.\par
\b Example:\b0 if (a == 2) \{\par
 return TRUE; /* special case */\par
\} else \{\par
 return isprime(a); /* works only for odd a */\par
\}\par
\b 4.End-Of-Line Comments\par
Example:\b0 if (foo > 1) \{\par
 // Do a double-flip.\par
 ...\par
\}\par
else\par
 return false; // Explain why here.\par
//if (bar > 1) \{\par
//\par
// // Do a triple-flip.\par
// ...\par
//\}\par
//else\par
// return false;\par
\par
\b 5.2 Documentation Comments\par
\b0 Doc comments describe Java classes, interfaces, constructors, methods, and fields. Each doc comment is set inside the comment delimiters /**...*/, with one comment per API. This comment should appear just before the declaration\par
\b Example:\b0 /**\par
 * The Example class provides ...\par
 */\par
class Example \{ ...\par
\b\fs28\par
6.Declarations\par
\fs22 1.Number Per Line\par
\b0 One declaration per line is recommended since it encourages commenting. In other words,\par
int level; // indentation level\par
int size; // size of table\par
\b\tab\par
2.Placement\par
\b0 Put declarations only at the beginning of blocks. (A block is any code surrounded by curly braces \ldblquote\{\rdblquote  and \ldblquote\}\rdblquote .)\par
void MyMethod() \{\par
 int int1; // beginning of method block\par
 if (condition) \{\par
 int int2; // beginning of "if" block\par
 ...\par
 \}\par
\}\par
\b 3.Initialization \par
\b0 Try to initialize local variables where they\rquote re declared. The only reason not to initialize a variable where it\rquote s declared is if the initial value depends on some computation occurring first\par
\b 4.Class and Interface Declarations\par
\b0 When coding Java classes and interfaces, the following formatting rules should be followed:\par
\f1\bullet  No space between a method name and the parenthesis \ldblquote (\ldblquote  starting its parameter list\par
\bullet  Open brace \ldblquote\{\rdblquote  appears at the end of the same line as the declaration statement\par
\bullet  Closing brace \ldblquote\}\rdblquote  starts a line by itself indented to match its corresponding opening\par
statement, except when it is a null statement the \ldblquote\}\rdblquote  should appear immediately after the\f0\lang1033  \par
\f1\lang9\ldblquote\{\ldblquote\f0\par

\pard\sa200\sl276\slmult1\tab\b\fs28 7.Statements\fs22\tab\par
\tab\par
\tab 7.1 Simple Statements\par

\pard\li710\sa200\sl276\slmult1\b0 Each line should contain at most one statement.\par
 Example:argv++; argc--; // AVOID!\par
\b 7.1Compound Statements\par
\b0 Compound statements are statements that contain lists of statements enclosed in braces \ldblquote\{ statements \}\rdblquote . \par
The enclosed statements should be indented one more level than the compound statement.\par
\b 7.3 return Statements\par
\b0 A return statement with a value should not use parentheses unless they make the return value more obvious in some way. \par
Example:\par
return;\par
return myDisk.size();\par
return (size ? size : defaultSize);\par
\b 7.4if, if-else, if-else-if-else Statements\par
\b0 The if-else class of statements should have the following form:\par
if (condition) \{\par
statements;\par
\}\par
if (condition) \{\par
statements;\par
\} else \{\par
statements;\par
\}\par
if (condition) \{\par
statements;\par
\} else if (condition) \{\par
statements;\par
\} else if (condition) \{\par
statements;\par
\}\par
\b 7.5 for Statements\par
\b0 A for statement should have the following form:\par
for (initialization; condition; update) \{\par
statements;\par
\}\par
An empty for statement (one in which all the work is done in the initialization, condition, and\par
update clauses) should have the following form:\par
for (initialization; condition; update);\line\par
\b 7.6 while Statements\par
\b0 A while statement should have the following form:\par
while (condition) \{\par
statements;\par
\}\par
An empty while statement should have the following form:\par
while (condition);\par
\b 7.7 do-while Statements\par
\b0 A do-while statement should have the following form:\par
do \{\par
statements;\par
\} while (condition);\par
\b 7.8switch Statements\par
\b0 A switch statement should have the following form:\par
switch (condition) \{\par
case ABC:\par
statements;\par
 /* falls through */\par
case DEF:\par
statements;\par
 break;\par
case XYZ:\par
statements;\par
 break;\par
default:\par
statements;\par
 break;\par
\}\par
Every time a case falls through (doesn\rquote t include a break statement), add a comment where the\par
break statement would normally be.\par
\b 7.9 try-catch Statements\b0\par
A try-catch statement should have the following format:\par
try \{\par
statements;\par
\} catch (ExceptionClass e) \{\par
statements;\par
\}\par
\par
\b\fs28 8.White Space\par
\fs22 8.1Blank Lines\par
\b0 Blank lines improve readability by setting off sections of code that are logically related.Two blank lines should always be used in the following circumstances:\par
\f1\bullet  Between sections of a source file\par
\bullet  Between class and interface definitions\par
\b\f0\lang1033 8.2Blank Spaces\par
\b0 Blank spaces should be used in the following circumstances:\par
\f1\bullet  A keyword followed by a parenthesis should be separated by a space. \par
Example: while (true) \{\par
 \f0\tab\tab\f1 ...\par
 \f0\tab\tab\f1\}\par
Note that a blank space should not be used between a method name and its opening\f0  \f1 parenthesis. \par
\par
\b\f0\fs28 9.Naming Conventions\par
\b0\fs22 Naming conventions make programs more understandable by making them easier to read.\par
They can also give information about the function of the identifier\f1\emdash for example, whether it\rquote s a\f0  \f1 constant, package, or class\emdash which can be helpful in understanding the code.\par
\f0\lang9\par
\par
\par

\pard\li568\sa200\sl276\slmult1\b\tab\b0\par

\pard\sa200\sl276\slmult1\par
\par
}
 